---
import LayoutList from '~/icons/layout-list.astro';
---

<section class="resources">
	<div
		class="resources__header"
		id="resources-header">
		<h3
			class="resources__header__count"
			id="resources-header-count">
		</h3>
		<button
			id="resources-header-btn"
			class="resources__header__btn">
			<span class="resources__header__btn__icon">
				<LayoutList />
			</span>
		</button>
	</div>
	<div
		id="resources-list"
		class="resources__list resources__list--grid">
	</div>
	<canvas id="canvas"></canvas>
</section>

<script>
	import { BookmarkIcon } from '~/components/BookmarkIcon';
	import { ResourceCard } from '~/components/ResourceCard';
	import { ResourceCardThin } from '~/components/ResourceCardThin';
	import { resources, type Resource } from '~/data';
	import { useConfetti } from '~/utils/confetti';
	import { favsStore, filtersStore } from '../store/index';

	const resourcesCount = document.getElementById('resources-header');
	const resourcesCountText = document.getElementById('resources-header-count');
	const resourcesList = document.getElementById('resources-list');
	const resourcesHeaderBtn = document.getElementById('resources-header-btn');

	let resourcesRendered: Resource[] = [];

	filtersStore.subscribe(state => {
		if (!resourcesList || !resourcesCount || !resourcesCountText) return;
		const { categories, page, moreItems, searchValue, layout } = state;

		resourcesList.innerHTML = '';

		/**
		 * Resources filtered by categories
		 */
		let resourcesFiltered =
			categories && categories.length > 0
				? resources.filter(resource => {
						return categories.every(cat => resource.categories.includes(cat));
					})
				: resources;

		/**
		 * Resources filtered by search
		 */
		if (searchValue) {
			resourcesFiltered = resourcesFiltered.filter(resource => {
				return resource.title.toLowerCase().includes(searchValue.toLowerCase());
			});
		}

		const NUM_RESOURCES_PER_PAGE = layout === 'grid' ? 12 : 24;

		const resourcesResult = resourcesFiltered.slice(page * NUM_RESOURCES_PER_PAGE, (page + 1) * NUM_RESOURCES_PER_PAGE);
		if (resourcesResult.length === 0 && page > 0) {
			filtersStore.set({ ...filtersStore.value, page: 0 });
			return;
		}
		resourcesRendered = resourcesResult;

		/**
		 * Resources results counter
		 */
		resourcesCount.classList.remove('resources__header--empty');
		resourcesCountText.textContent = `${resourcesFiltered.length} results`;

		/**
		 * Render resources cards
		 */
		resourcesResult.forEach(resource => {
			const resourceCard = layout === 'grid' ? ResourceCard(resource) : ResourceCardThin(resource);
			resourcesList.appendChild(resourceCard);

			const confettiCanvas = document.createElement('canvas');
			confettiCanvas.id = `confetti-canvas-${resource.id}`;
			confettiCanvas.classList.add('confetti-canvas');
			resourceCard.appendChild(confettiCanvas);

			/**
			 * Bookmark button event
			 */
			const bookmarkBtn = document.getElementById(`bookmark-btn-${resource.id}`);

			bookmarkBtn?.addEventListener('click', e => {
				const isBookmarked = favsStore.get().includes(resource.id);

				if (isBookmarked) {
					favsStore.set(favsStore.get().filter(id => id !== resource.id));
				} else {
					favsStore.set([...favsStore.get(), resource.id]);
				}

				useConfetti(resourceCard, resource.id, layout === 'grid');
			});
		});

		/**
		 * No results found
		 */
		if (resourcesRendered.length === 0) {
			resourcesCount.classList.add('resources__header--empty');
			resourcesCountText.textContent = `
				No results found
			`;
		}

		/**
		 * More items state
		 */
		const nextMoreItems = resourcesFiltered.length > NUM_RESOURCES_PER_PAGE * (page + 1);
		if (nextMoreItems !== moreItems) {
			filtersStore.set({ ...filtersStore.get(), moreItems: nextMoreItems });
		}
	});

	favsStore.subscribe(() => {
		if (resourcesRendered.length === 0) return;

		resourcesRendered.forEach(resource => {
			const bookmarkBtn = document.getElementById(`bookmark-btn-${resource.id}`);
			if (!bookmarkBtn) return;

			/**
			 * Update bookmark icon
			 */
			const bookmarkIcon = BookmarkIcon(resource.id);
			bookmarkBtn.innerHTML = bookmarkIcon;
		});
	});

	resourcesHeaderBtn?.addEventListener('click', () => {
		resourcesList?.classList.toggle('resources__list--grid');
		filtersStore.set({ ...filtersStore.value, layout: resourcesList?.className.includes('grid') ? 'grid' : 'list' });
	});
</script>

<style lang="scss" is:global>
	:root {
		--card-height: 300px;
		--card-height-large: 350px;
	}

	.resources {
		width: 100%;
		position: relative;

		&__header {
			display: flex;
			align-items: center;
			justify-content: space-between;
			width: 100%;
			padding: 0 3rem;
			margin-top: -20px;
			margin-bottom: 10px;
			box-sizing: border-box;

			&__count {
				font-weight: 100;
				font-size: var(--font-md);
				line-height: 0;
			}

			&__btn {
				display: grid;
				place-items: center;
				border: none;
				background-color: transparent;
				cursor: pointer;

				&__icon {
					width: 1.2rem;
					color: var(--dark-400);
					transition: all 0.3s ease;
				}
			}

			&__btn:hover &__btn__icon {
				color: var(--dark-100);
			}

			&--empty {
				width: 100%;
				display: grid;
				place-items: center;
			}

			&--empty &__count {
				margin-left: 0;
			}

			&--empty &__btn__icon {
				display: none;
			}
		}

		&__list {
			display: grid;
			grid-template-columns: repeat(auto-fill, minmax(20vw, 1fr));
			gap: 0.5rem;
			width: 100%;
			box-sizing: border-box;
			padding: 0 3rem;

			&__content:hover .resource-description span {
				background-color: var(--dark-500);
			}

			.card:nth-child(odd) {
				height: var(--card-height);
			}

			.card:nth-child(even) {
				height: var(--card-height-large);
			}

			.card:nth-child(5),
			.card:nth-child(7),
			.card:nth-child(9),
			.card:nth-child(11) {
				margin-top: -50px;
				height: var(--card-height-large);
			}

			.card:nth-child(10),
			.card:nth-child(12) {
				height: var(--card-height);
			}
		}

		&__list--grid {
			display: grid;
			grid-template-columns: repeat(auto-fill, minmax(20vw, 1fr));
			gap: 1.5rem;
		}
	}

	.resources::before {
		content: '';
		position: absolute;
		top: -0.5rem;
		left: 0;
		width: 100%;
		height: 200px;
		background-color: var(--light-200);
		z-index: -1;
	}

	@media (max-width: 1200px) {
		.resources {
			&__header {
				padding: 0 1rem;
				margin-top: -5px;
				margin-bottom: 0px;
			}

			&__list {
				grid-template-columns: repeat(auto-fill, minmax(25vw, 1fr));
				padding: 1rem;

				.card {
					height: var(--card-height) !important;
					margin-top: 0 !important;
				}
			}
		}
	}

	@media (max-width: 750px) {
		.resources {
			&__header {
				&__count {
					font-size: var(--font-sm);
				}
			}

			&__list {
				grid-template-columns: repeat(auto-fill, minmax(40vw, 1fr));
				gap: 1rem;
			}
		}
	}

	@media (max-width: 500px) {
		.resources {
			&__list {
				grid-template-columns: repeat(auto-fill, minmax(90vw, 1fr));
				gap: 0.5rem;
			}
		}
	}
</style>
